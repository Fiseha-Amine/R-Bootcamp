knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyverse)
library(dplyr)
library(mlbench)
library(mice)
library(ggplot2)
library(plotly)
#Because the data contain "Umlaute" we use "UTF-8" for the read in.
data <- read.csv2("mietinserate_v1.csv", header = TRUE, fileEncoding = "UTF-8")
head(data)
str(data)
summary(data)
data <- as.data.frame(data)
data$Zimmer = as.numeric(data$Zimmer)
data$Fläche = as.numeric(data$Fläche)
data[data == ""] <- NA
data$Bezugsdatum =as.Date(data$Bezugsdatum, "%d.%m.%Y")
data_1 <- rename(data, W.Type = Wohnungstyp, Miete = Mietpreis_Brutto, Quad_m = Quadratmeterpreis_Brutto, Bezug = Bezugsdatum, W.Fläche = Fläche)
data_1
colSums(is.na(data.1)) ##counts all NA in a table
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyverse)
library(dplyr)
library(mlbench)
library(mice)
library(ggplot2)
library(plotly)
library(shiny)
#install.packages("webshot")
#webshot::install_phantomjs()
#Because the data contain "Umlaute" we use "UTF-8" for the read in.
data <- read.csv2("mietinserate_v1.csv", header = TRUE, fileEncoding = "UTF-8")
head(data)
str(data)
summary(data)
#Read new data set and join new data set to our data set.
data_canton <- read_xlsx("SchweizKantone_Einwohner_org.xlsx", skip = 3)
head(data_canton)
str(data_canton)
#change names of original 4th row (now 1st) of the data set to have those as the column names and for the join preparation
data_canton <- rename(data_canton, Kanton = Schweiz, KT = CHE,  Hauptstädte = Bern, G.Fläche = "41285", Einwohner_1980 = "6365960", Einwohner_1990 = "6873687", Einwohner_2000 = "7288010", Einwohner_2010 = "7870134", Einwohner_2019 = "8603899")
head(data_canton)
#join data sets
data_left_join <- left_join(data, data_canton, by = "KT")
head(data_left_join)
data_left_join
data_2 <- as.data.frame(data_left_join)
#transform data
data_2$Zimmer = as.numeric(data_left_join$Zimmer)
data_2$Fläche = as.numeric(data_left_join$Fläche)
data_2[data_2 == ""] <- NA
data_2$Bezugsdatum =as.Date(data_left_join$Bezugsdatum, "%d.%m.%Y")
#rename data columns for a better readability
data_1 <- rename(data_2, W.Type = Wohnungstyp, Miete = Mietpreis_Brutto, Quad_m = Quadratmeterpreis_Brutto, Bezug = Bezugsdatum, W.Fläche = Fläche)
data_1
#delete columns that are not needed anymore
data_3 <- data_1 %>% select(-Einwohner_1980, -Einwohner_1990, -Einwohner_2000, -Einwohner_2010)
data_3
data_sep <- data_3$PLZ_Ort%>%
str_match('(.*\\d) (.*)') %>%
as_tibble() %>%
select(2:3) %>%
set_names(c('PLZ', 'Ort'))
data_sep
data_sort <- data_3%>%select(-PLZ_Ort)
data_clean <- bind_cols(data_sort, data_sep)
data_clean
# data_sort <- data_sort%>%select(-PLZ_Ort)
# data_clean <- bind_cols(data_sort, data_sep)
# data_clean
head(data_clean)
str(data_clean)
colSums(is.na(data_clean)) ##counts all NA in a table
md.pattern(data_clean, rotate.names = TRUE) ##shows a table and a plot of the data for the NAs
# data_kanton <- group_by(data, "KT")
# sum(is.na(data_kanton$Fläche))
data_clean %>% count(KT, sort = TRUE) #shows the amount of cantons in dataset per canton
data_clean %>%
group_by(KT) %>%
summarise(non_na_count = sum(is.na(Zimmer))) #Lists all cantons and shows the "NAs"
data_clean %>%
filter(is.na(Zimmer))  %>%
count(KT) #Shows on the found cantons with NAs
plot(y = data_clean$Miete,
x = data_clean$W.Fläche,
pch = "x",
title("Price per appartment"),
xlab = "living space",
ylab = "rent")
#abline() zufügen???
ggplot(data_clean, aes(x=Miete, y=W.Fläche) ) +
geom_hex(bons = 70) +
scale_fill_continuous(type = "viridis") +
theme_bw()
fig <- plot_ly(
data_clean, x = ~KT, y = ~Miete, type = 'bar')
fig <- fig %>% layout(title = 'Rent per canton',
xaxis = list(title = "Canton"),
yaxis = list(title = "Rent"))
fig
tmpFile <- tempfile(fileext = ".png")
export(fig, file = tmpFile)
install.packages("hexbin")
plot(y = data_clean$Miete,
x = data_clean$W.Fläche,
pch = "x",
title("Price per appartment"),
xlab = "living space",
ylab = "rent")
#abline() zufügen???
ggplot(data_clean, aes(x=Miete, y=W.Fläche) ) +
geom_hex(bons = 70) +
scale_fill_continuous(type = "viridis") +
theme_bw()
plot(y = data_clean$Miete,
x = data_clean$W.Fläche,
pch = "x",
title("Price per appartment"),
xlab = "living space",
ylab = "rent")
#abline() zufügen???
ggplot(data_clean, aes(x=Miete, y=W.Fläche) ) +
geom_hex(bons = 70) +
scale_fill_continuous(type = "viridis") +
theme_bw()
plot(y = data_clean$Miete,
x = data_clean$W.Fläche,
pch = "x",
title("Rental Price per Appartment"),
xlab = "living space in square meter",
ylab = "rental price")
abline(h = c(15, 25),
col = c("lightgray", "darkgray"),
lty = 1:2)
plot(y = data_clean$Miete,
x = data_clean$W.Fläche,
pch = "x",
title("Rental Price per Appartment"),
xlab = "living space in square meter",
ylab = "rental price")
abline(y = data_clean$Miete,
x = data_clean$W.Fläche,
col = c("lightgray", "darkgray"),
lty = 1:2)
plot(y = data_clean$Miete,
x = data_clean$W.Fläche,
pch = "x",
title("Rental Price per Appartment"),
xlab = "living space in square meter",
ylab = "rental price")
abline( col = c("lightgray", "darkgray"),
lty = 1:2)
plot(y = data_clean$Miete,
x = data_clean$W.Fläche,
pch = "x",
title("Rental Price per Appartment"),
xlab = "living space in square meter",
ylab = "rental price")
plot(lm(y = data_clean$Miete,
x = data_clean$W.Fläche,
pch = "x",
title("Rental Price per Appartment"),
xlab = "living space in square meter",
ylab = "rental price"))
plot(lm(y = data_clean$Miete,
x = data_clean$W.Fläche),
pch = "x",
title("Rental Price per Appartment"),
xlab = "living space in square meter",
ylab = "rental price")
plot(y = data_clean$Miete,
x = data_clean$W.Fläche,
pch = "x",
title("Rental Price per Appartment"),
xlab = "living space in square meter",
ylab = "rental price")
ggplot(data_clean, aes(x=Miete, y=W.Fläche) ) +
geom_hex(bons = 70) +
scale_fill_continuous(type = "viridis") +
theme_bw()
install.packages("webshot")
#Read new data set and join new data set to our data set.
data_canton <- read_xlsx("SchweizKantone_Einwohner_org.xlsx", skip = 3)
head(data_canton)
str(data_canton)
#change names of original 4th row (now 1st) of the data set to have those as the column names and for the join preparation
data_canton <- rename(data_canton, Kanton = Schweiz, KT = CHE,  Hauptstädte = Bern, G.Fläche = "41285", Einwohner_1980 = "6365960", Einwohner_1990 = "6873687", Einwohner_2000 = "7288010", Einwohner_2010 = "7870134", Einwohner_2019 = "8603899")
head(data_canton)
#join data sets
data_left_join <- left_join(data, data_canton, by = "KT")
head(data_left_join)
data_left_join
colSums(is.na(data_clean)) ##counts all NA in a table
md.pattern(data_clean, rotate.names = TRUE) ##shows a table and a plot of the data for the NAs
# data_kanton <- group_by(data, "KT")
# sum(is.na(data_kanton$Fläche))
data_clean %>% count(KT, sort = TRUE) #shows the amount of cantons in dataset per canton
data_clean %>%
group_by(KT) %>%
summarise(non_na_count = sum(is.na(Zimmer))) #Lists all cantons and shows the "NAs"
data_clean %>%
filter(is.na(Zimmer))  %>%
count(KT) #Shows on the found cantons with NAs
fig <- plot_ly(
data_clean, x = ~KT, y = ~Miete, type = 'bar')
fig <- fig %>% layout(title = 'Rent per canton',
xaxis = list(title = "Canton"),
yaxis = list(title = "Rent"))
fig
tmpFile <- tempfile(fileext = ".png")
export(fig, file = tmpFile)
fig2 <- plot_ly(data = data_clean, x = ~Einwohner_2019, y = ~G.Fläche,
marker = list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 2)))
fig2 <- fig2 %>% layout(title = 'Styled Scatter',
yaxis = list(zeroline = FALSE),
xaxis = list(zeroline = FALSE))
fig2
tmpFile <- tempfile(fileext = ".png")
export(fig2, file = tmpFile)
ggplot(data_clean, aes(x=Miete, y=Zimmer, color=W.Type))+
geom_point(size=2)
##
qplot(y = Zimmer, x = Miete, data = data_clean, facets = ~ W.Type)
##
boxplot(Zimmer ~ W.Type, data = data_clean, main = "xxx")
ggplot(data_clean, aes(x=Miete, y=Zimmer, color=W.Type))+
geom_point(size=2)
##
qplot(y = Zimmer, x = Miete, data = data_clean, facets = ~ W.Type)
##
boxplot(Zimmer ~ W.Type, data = data_clean, main = "xxx")
##
boxplot(Zimmer ~ W.Type, data = data_clean, main = "xxx")
##
boxplot(Zimmer ~ W.Type, data = data_clean, main = "Average number of rooms of the rental objects")
##
boxplot(Zimmer ~ W.Type, data = data_clean, main = "Average number of rooms of the rental objects")
##
boxplot(Zimmer ~ W.Type, data = data_clean, main = "Average number of rooms of the rental objects")
pairs(~Zimmer+Miete+W.Fläche+G.Fläche+Einwohner_2019,data=data_clean,
main="Simple Scatterplot")
pairs(~Zimmer+Miete+W.Fläche+G.Fläche+Einwohner_2019,data=data_clean,
main="Corellation Matrix of different attributes")
