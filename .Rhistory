knitr::opts_chunk$set(echo = TRUE)
if (interactive()) {
# Launch with :
esquisser(data_clean)
# If in RStudio it will be launched by default in dialog window
# If not, it will be launched in browser
#Launch esquisse in browser :
esquisser(data_clean, viewer = "browser")
#options("esquisse.viewer" = "viewer")
}
library(esquisse)
if (interactive()) {
# Launch with :
esquisser(data_clean)
# If in RStudio it will be launched by default in dialog window
# If not, it will be launched in browser
#Launch esquisse in browser :
esquisser(data_clean, viewer = "browser")
#options("esquisse.viewer" = "viewer")
}
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyverse)
library(dplyr)
library(mlbench)
library(mice)
library(ggplot2)
library(plotly)
library(shiny)
### needed to export plotly to PDF
#install.packages("webshot")
#webshot::install_phantomjs()
#Because the data contain "Umlaute" we use "UTF-8" for the read in.
data <- read.csv2("mietinserate_v1.csv", header = TRUE, fileEncoding = "UTF-8")
head(data)
str(data)
summary(data)
#Read new data set and join new data set to our data set.
data_canton <- read_xlsx("SchweizKantone_Einwohner_org.xlsx", skip = 3)
head(data_canton)
str(data_canton)
#change names of original 4th row (now 1st) of the data set to have those as the column names and for the join preparation
data_canton <- rename(data_canton, Kanton = Schweiz, KT = CHE,  Hauptstädte = Bern, G.Fläche = "41285", Einwohner_1980 = "6365960", Einwohner_1990 = "6873687", Einwohner_2000 = "7288010", Einwohner_2010 = "7870134", Einwohner_2019 = "8603899")
head(data_canton)
#join data sets
data_left_join <- left_join(data, data_canton, by = "KT")
head(data_left_join)
data_left_join
data_2 <- as.data.frame(data_left_join)
#transform data
data_2$Zimmer = as.numeric(data_left_join$Zimmer)
data_2$Fläche = as.numeric(data_left_join$Fläche)
data_2[data_2 == ""] <- NA
data_2$Bezugsdatum =as.Date(data_left_join$Bezugsdatum, "%d.%m.%Y")
#rename data columns for a better readability
data_1 <- rename(data_2, W.Type = Wohnungstyp, Miete = Mietpreis_Brutto, Quad_m = Quadratmeterpreis_Brutto, Bezug = Bezugsdatum, W.Fläche = Fläche)
data_1
#delete columns that are not needed anymore
data_3 <- data_1 %>% select(-Einwohner_1980, -Einwohner_1990, -Einwohner_2000, -Einwohner_2010)
data_3
data_sep <- data_3$PLZ_Ort%>%
str_match('(.*\\d) (.*)') %>%
as_tibble() %>%
select(2:3) %>%
set_names(c('PLZ', 'Ort'))
data_sep
data_sort <- data_3%>%select(-PLZ_Ort)
data_clean <- bind_cols(data_sort, data_sep)
data_clean
# data_sort <- data_sort%>%select(-PLZ_Ort)
# data_clean <- bind_cols(data_sort, data_sep)
# data_clean
colSums(is.na(data_clean)) ##counts all NAs shown in a table
#data_clean %>% count(KT, sort = TRUE) #shows the amount of cantons in dataset per canton
data_clean %>%
group_by(KT) %>%
summarise(NAs_Zimmer_count = sum(is.na(Zimmer))) #Lists all cantons and shows the sum of "NAs" for the column "Zimmer" including 0
data_clean %>%
filter(is.na(Zimmer))  %>%
count(KT) #Lists all cantons including "NAs" for the column "Zimmer" and sums them without including 0
plot(y = data_clean$Miete,
x = data_clean$W.Fläche,
pch = "x",
title("Rental Price per Apartment"),
xlab = "Apartment Area",
ylab = "Rental Price")
g <- ggplot(data_clean, aes(x=W.Fläche, y=Miete, xlab = "Rental Price", ylab = "Apartment Area") ) +
geom_hex(bons = 70) +
scale_fill_continuous(type = "viridis") +
theme_bw()
g + ggtitle("Price in Relation to Apartment Area") +
xlab("Rental Price") + ylab("Apartment Area")
count_W_Type <- data_clean %>%
group_by(KT, W.Type) %>%
count(KT, sort = TRUE)
fig <- plot_ly(
count_W_Type, x = ~KT, y = ~n, type = 'bar', color = ~W.Type)
fig <- fig %>% layout(barmode = "stack",
title = 'Apartments per canton',
xaxis = list(title = "Canton"),
yaxis = list(title = "Number apartments"))
fig
#count W-Type per canton
count_W_Type <- data_clean %>%
group_by(KT) %>%
count(KT, sort = TRUE)
fig <- plot_ly(
count_W_Type, x = ~KT, y = ~n, type = 'bar')
fig <- fig %>% layout(title = 'Apartments per canton',
xaxis = list(title = "Canton"),
yaxis = list(title = "Number apartments"))
fig
tmpFile <- tempfile(fileext = ".png")
export(fig, file = tmpFile)
fig <- plot_ly(
data_clean, x = ~KT, y = ~Miete, type = 'bar')
fig <- fig %>% layout(title = 'Rent per canton',
xaxis = list(title = "Canton"),
yaxis = list(title = "Rent"))
fig
tmpFile <- tempfile(fileext = ".png")
export(fig, file = tmpFile)
fig2 <- plot_ly(data_clean, y = ~G.Fläche, x = ~Einwohner_2019, type = 'scatter', mode = 'markers', size = 7,
hoverinfo = 'text',
text = ~paste('</br> Canton: ', Kanton,
'</br> Residents: ', Einwohner_2019,
'</br> Community area: ', G.Fläche))
fig2 <- fig2 %>% layout(title = 'Residents in 2019 against community area via canton',
xaxis = list(title = "Residents in 2019"),
yaxis = list(title = "Community area"))
fig2
tmpFile <- tempfile(fileext = ".png")
export(fig2, file = tmpFile)
fig2 <- plot_ly(data = data_clean, x = ~Einwohner_2019, y = ~G.Fläche,
marker = list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 2)))
fig2 <- fig2 %>% layout(title = 'Styled Scatter for Rent per Canton',
xaxis = list(title = "Canton Population"),
yaxis = list(title = "Rent"))
fig2
tmpFile <- tempfile(fileext = ".png")
export(fig2, file = tmpFile)
g <- ggplot(data_clean, aes(x=Miete, y=Zimmer, color=W.Type))+
geom_point(size=2)
g + ggtitle("Types of Apartments") +
xlab("Rental Price") + ylab("Rooms")
##
qplot(y = Zimmer, x = Miete, data = data_clean, facets = ~ W.Type, main = "Types of Apartments", xlab = "Rental Price", ylab = "Rooms")
##
boxplot(Zimmer ~ W.Type, data = data_clean, main = "Average number of rooms of the rental objects", xlab = "Type of Apartment", ylab = "Rooms")
pairs(~Zimmer+Miete+W.Fläche+G.Fläche+Einwohner_2019,data=data_clean,
main="Correlation Matrix of different attributes")
top10 <- data_clean%>%top_n(n = 10, wt = Miete)
top10_sorted <- top10[order(top10$Miete, na.last=TRUE) , ]
top10_sorted
top10 <- data_clean%>%top_n(n = 10, wt = W.Fläche)
top10_sorted <- top10[order(top10$W.Fläche, na.last=TRUE) , ]
top10_sorted
# #install.packages(shiny)
# install.packages("esquisse")
# # Import shiny and
# # esquisse packages
library(shiny)
library(esquisse)
data(data_clean)
esquisser()
if (interactive()) {
# Launch with :
esquisser(data_clean)
# If in RStudio it will be launched by default in dialog window
# If not, it will be launched in browser
#Launch esquisse in browser :
esquisser(data_clean, viewer = "browser")
#options("esquisse.viewer" = "viewer")
}
ui <- fluidPage(
tags$h2("dragulaInput demo for geeksforgeeks"),
tags$br(),
# using dragulaInput()
# to create a drag and
# drop widget
dragulaInput(
inputId = "data_di", sourceLabel = "Source",
targetsLabels = c("Drop Here", "Drop Here 2"),
choices = names(rock), width = "400px"),
verbatimTextOutput(outputId = "result"))
server <- function(input, output, session)
{
output$result <- renderPrint(str(input$data_di))
}
shinyApp(ui = ui, server = server)
if (interactive()) {
# Launch with :
esquisser(data_clean)
# If in RStudio it will be launched by default in dialog window
# If not, it will be launched in browser
#Launch esquisse in browser :
esquisser(data_clean, viewer = "browser")
}
# data(data_clean)
# esquisser()
if (interactive()) {
# Launch with :
#esquisser(data_clean)
#Launch esquisse in browser :
esquisser(data_clean, viewer = "browser")
}
knitr::opts_chunk$set(echo = TRUE)
fig2 <- plot_ly(data_clean, y = ~G.Fläche, x = ~Einwohner_2019, type = 'scatter', mode = 'markers', size = 7,
hoverinfo = 'text',
text = ~paste('</br> Canton: ', Kanton,
'</br> Residents: ', Einwohner_2019,
'</br> Community area: ', G.Fläche))
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyverse)
library(dplyr)
library(mlbench)
library(mice)
library(ggplot2)
library(plotly)
library(shiny)
library(esquisse)
fig2 <- plotly(data_clean, y = ~G.Fläche, x = ~Einwohner_2019, type = 'scatter', mode = 'markers', size = 7,
hoverinfo = 'text',
text = ~paste('</br> Canton: ', Kanton,
'</br> Residents: ', Einwohner_2019,
'</br> Community area: ', G.Fläche))
data_clean
data_clean %>% mutate_all(scale)
data_clean %>% mutate(W.Fläche, Einwohner_2019, G.Fläche, Miete)
data_clean %>% mutate_all(W.Fläche, Einwohner_2019, G.Fläche, Miete)
data_clean %>% mutate(scale(W.Fläche, Einwohner_2019, G.Fläche, Miete))
data_clean %>% scale(W.Fläche, Einwohner_2019, G.Fläche, Miete)
data_scaled <- data_clean %>%
mutate_at(c("W.Fläche", "Miete", "Einwohner_2019", "G.Fläche"), ~(scale(.) %>% as.vector))
data_scaled <- data_clean %>%
mutate_at(c("W.Fläche", "Miete", "Einwohner_2019", "G.Fläche"), ~(scale(.) %>% as.vector))
data_scaled
data_scaled <- data_clean %>%
mutate_at(c("W.Fläche", "Miete", "Einwohner_2019", "G.Fläche", "Zimmer"), ~(scale(.) %>% as.vector))
data_scaled
simple.fit = lm(Miete~W.Fläche, data=data_scaled)
summary(simple.fit)
data_scaled <- data_clean %>%
mutate_at(c("W.Fläche", "Miete", "Einwohner_2019", "G.Fläche", "Zimmer"), ~(scale(.) %>% as.vector))
simple.fit = lm(Miete~W.Fläche, data=data_scaled)
summary(simple.fit)
multi.fit = lm(Miete~W.Fläche + G.Fläche + Zimmer + Einwohner_2019, data=data_scaled)
summary(multi.fit)
data_scaled <- data_clean %>%
mutate_at(c("W.Fläche", "Miete", "Einwohner_2019", "G.Fläche", "Zimmer"), ~(scale(.) %>% as.vector))
simple.fit = lm(Miete~W.Fläche, data=data_scaled)
summary(simple.fit)
multi.fit = lm(Miete~W.Fläche + G.Fläche + Zimmer + Einwohner_2019, data=data_scaled)
summary(multi.fit)
fig <- plot_ly(
data_clean, x = ~KT, y = ~Miete, type = 'bar')
fig <- fig %>% layout(title = 'Rent per canton',
xaxis = list(title = "Canton"),
yaxis = list(title = "Rent"))
fig
tmpFile <- tempfile(fileext = ".png")
export(fig, file = tmpFile)
g <- ggplot(data_clean, aes(x=Miete, y=Zimmer, color=W.Type))+
geom_point(size=2)
g + ggtitle("Types of Apartments") +
xlab("Rental Price") + ylab("Rooms")
##
qplot(y = Zimmer, x = Miete, data = data_clean, facets = ~ W.Type, main = "Types of Apartments", xlab = "Rental Price", ylab = "Rooms")
install.packages("esquisse")
install.packages("fBasics")
library(esquisse)
library(fBasics)
#Testing normal distribution and independence assumptions
jarqueberaTest(simple.fit$resid) #Test residuals for normality
#Testing normal distribution and independence assumptions
jarqueberaTest(simple.fit$resid) #Test residuals for normality
dwtest(simple.fit) #Test for independence of residuals
library(lmtest)
#Testing normal distribution and independence assumptions
jarqueberaTest(simple.fit$resid) #Test residuals for normality
dwtest(simple.fit) #Test for independence of residuals
#Testing normal distribution and independence assumptions
jarqueberaTest(simple.fit$resid) #Test residuals for normality
dwtest(simple.fit) #Test for independence of residuals
plot(simple.fit$resid~data_scaled$Miete[order(data_scaled$Miete)],
main="Rental Price Residuals for Simple Regression",
xlab="Rental Price", ylab="Residuals")
plot(simple.fit$resid~data_scaled$Miete[order(data_scaled$Miete)],
main="Rental Price Residuals for Simple Regression",
xlab="Rental Price", ylab="Residuals")
hist(simple.fit$resid, main="Histogram of Residuals",
ylab="Residuals")
data_scaled <- data_clean %>%
mutate_at(c("W.Fläche", "Miete", "Einwohner_2019", "G.Fläche", "Zimmer"), ~(scale(.) %>% as.vector))
simple.fit <- lm(Miete~W.Fläche, data=data_scaled)
summary(simple.fit)
data_scaled <- data_clean %>%
mutate_at(c("W.Fläche", "Miete", "Einwohner_2019", "G.Fläche", "Zimmer"), ~(scale(.) %>% as.vector))
simple.fit <- lm(Miete~W.Fläche, data=data_scaled)
summary(simple.fit)
predicted <- predict(simple.fit)
residuals <- residuals(fit)
summary(residuals)
multi.fit = lm(Miete~W.Fläche + G.Fläche + Zimmer + Einwohner_2019, data=data_scaled)
summary(multi.fit)
predicted <- predict(multi.fit)
residuals <- residuals(fit)
summary(residuals)
#Testing normal distribution and independence assumptions
jarqueberaTest(simple.fit$resid) #Test residuals for normality
dwtest(simple.fit) #Test for independence of residuals
predicted <- predict(simple.fit)
residuals <- residuals(fit)
summary(residuals)
predicted <- predict(multi.fit)
residuals <- residuals(fit)
summary(residuals)
predicted <- predict(multi.fit)
residuals <- residuals(fit)
summary(residuals)
knitr::opts_chunk$set(echo = TRUE)
#Testing normal distribution and independence assumptions
jarqueberaTest(simple.fit$resid) #Test residuals for normality
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyverse)
library(dplyr)
library(mlbench)
library(mice)
library(ggplot2)
library(plotly)
library(shiny)
library(esquisse)
library(fBasics)
library(lmtest)
### needed to export plotly to PDF
#install.packages("webshot")
#webshot::install_phantomjs()
###package for esquisser
#install.packages("esquisse")
#Because the data contain "Umlaute" we use "UTF-8" for the read in.
data <- read.csv2("mietinserate_v1.csv", header = TRUE, fileEncoding = "UTF-8")
head(data)
str(data)
summary(data)
#Read new data set and join new data set to our data set.
data_canton <- read_xlsx("SchweizKantone_Einwohner_org.xlsx", skip = 3)
head(data_canton)
str(data_canton)
#change names of original 4th row (now 1st) of the data set to have those as the column names and for the join preparation
data_canton <- rename(data_canton, Kanton = Schweiz, KT = CHE,  Hauptstädte = Bern, G.Fläche = "41285", Einwohner_1980 = "6365960", Einwohner_1990 = "6873687", Einwohner_2000 = "7288010", Einwohner_2010 = "7870134", Einwohner_2019 = "8603899")
head(data_canton)
#join data sets
data_left_join <- left_join(data, data_canton, by = "KT")
head(data_left_join)
data_left_join
data_2 <- as.data.frame(data_left_join)
#transform data
data_2$Zimmer = as.numeric(data_left_join$Zimmer)
data_2$Fläche = as.numeric(data_left_join$Fläche)
data_2[data_2 == ""] <- NA
data_2$Bezugsdatum =as.Date(data_left_join$Bezugsdatum, "%d.%m.%Y")
#rename data columns for a better readability
data_1 <- rename(data_2, W.Type = Wohnungstyp, Miete = Mietpreis_Brutto, Quad_m = Quadratmeterpreis_Brutto, Bezug = Bezugsdatum, W.Fläche = Fläche)
data_1
#delete columns that are not needed anymore
data_3 <- data_1 %>% select(-Einwohner_1980, -Einwohner_1990, -Einwohner_2000, -Einwohner_2010)
data_3
data_sep <- data_3$PLZ_Ort%>%
str_match('(.*\\d) (.*)') %>%
as_tibble() %>%
select(2:3) %>%
set_names(c('PLZ', 'Ort'))
data_sep
data_sort <- data_3%>%select(-PLZ_Ort)
data_clean <- bind_cols(data_sort, data_sep)
data_clean
# data_sort <- data_sort%>%select(-PLZ_Ort)
# data_clean <- bind_cols(data_sort, data_sep)
# data_clean
#some example searches for NAs
data_clean %>%
group_by(KT) %>%
summarise(NAs_Zimmer_count = sum(is.na(Zimmer))) #Lists all cantons and shows the sum of "NAs" for the column "Zimmer" including 0
data_clean %>%
filter(is.na(Zimmer))  %>%
count(KT) #Lists all cantons including "NAs" for the column "Zimmer" and sums them without including 0
knitr::opts_chunk$set(echo = TRUE)
predicted <- predict(multi.fit)
residuals <- residuals(multi.fit)
summary(residuals)
knitr::opts_chunk$set(echo = TRUE)
multi.fit = lm(Miete~W.Fläche + G.Fläche + Zimmer + Einwohner_2019, data=data_scaled)
predicted <- predict(multi.fit)
residuals <- residuals(multi.fit)
summary(residuals)
knitr::opts_chunk$set(echo = TRUE)
#Testing normal distribution and independence assumptions
jarqueberaTest(simple.fit$resid) #Test residuals for normality
dwtest(simple.fit) #Test for independence of residuals
predicted <- predict(simple.fit)
residuals <- residuals(simple.fit)
ggplot(d, aes(x = Miete, y = W.Fläche)) +
geom_smooth(method = "lm", se = FALSE, color = "lightgrey") +     # regression line
geom_segment(aes(xend = wt, yend = predicted), alpha = .2) +      # draw line from point to line
geom_point(aes(color = abs(residuals), size = abs(residuals))) +  # size of the points
scale_color_continuous(low = "green", high = "red") +             # colour of the points mapped to residual size - green smaller, red larger
guides(color = FALSE, size = FALSE) +                             # Size legend removed
geom_point(aes(y = predicted), shape = 1) +
theme_bw()
knitr::opts_chunk$set(echo = TRUE)
#Testing normal distribution and independence assumptions
jarqueberaTest(simple.fit$resid) #Test residuals for normality
dwtest(simple.fit) #Test for independence of residuals
predicted <- predict(simple.fit)
residuals <- residuals(simple.fit)
ggplot(data_clean, aes(x = Miete, y = W.Fläche)) +
geom_smooth(method = "lm", se = FALSE, color = "lightgrey") +     # regression line
geom_segment(aes(xend = wt, yend = predicted), alpha = .2) +      # draw line from point to line
geom_point(aes(color = abs(residuals), size = abs(residuals))) +  # size of the points
scale_color_continuous(low = "green", high = "red") +             # colour of the points mapped to residual size - green smaller, red larger
guides(color = FALSE, size = FALSE) +                             # Size legend removed
geom_point(aes(y = predicted), shape = 1) +
theme_bw()
knitr::opts_chunk$set(echo = TRUE)
#Testing normal distribution and independence assumptions
jarqueberaTest(simple.fit$resid) #Test residuals for normality
dwtest(simple.fit) #Test for independence of residuals
predicted <- predict(simple.fit)
residuals <- residuals(simple.fit)
ggplot(data_clean, aes(x = Miete, y = W.Fläche)) +
geom_smooth(method = "lm", se = FALSE, color = "lightgrey") +     # regression line
geom_segment(aes(xend = Miete, yend = predicted), alpha = .2) +      # draw line from point to line
geom_point(aes(color = abs(residuals), size = abs(residuals))) +  # size of the points
scale_color_continuous(low = "green", high = "red") +             # colour of the points mapped to residual size - green smaller, red larger
guides(color = FALSE, size = FALSE) +                             # Size legend removed
geom_point(aes(y = predicted), shape = 1) +
theme_bw()
knitr::opts_chunk$set(echo = TRUE)
#Testing normal distribution and independence assumptions
jarqueberaTest(simple.fit$resid) #Test residuals for normality
dwtest(simple.fit) #Test for independence of residuals
predicted <- predict(simple.fit)
residuals <- residuals(simple.fit)
par(mfrow = c(2, 2))  # Split the plotting panel into a 2 x 2 grid
plot(simple.fit)
knitr::opts_chunk$set(echo = TRUE)
multi.fit = lm(Miete~W.Fläche + G.Fläche + Zimmer + Einwohner_2019, data=data_scaled)
predicted <- predict(multi.fit)
residuals <- residuals(multi.fit)
par(mfrow = c(2, 2))  # Split the plotting panel into a 2 x 2 grid
plot(multi.fit)
knitr::opts_chunk$set(echo = TRUE)
fig2 <- plot_ly(data_clean, y = ~G.Fläche, x = ~Einwohner_2019, type = 'scatter', mode = 'markers', size = 7,
hoverinfo = 'text',
text = ~paste('</br> Canton: ', Kanton,
'</br> Residents: ', Einwohner_2019,
'</br> Community area: ', G.Fläche))
fig2 <- fig2 %>% layout(title = 'Residents in 2019 against community area via canton',
xaxis = list(title = "Residents in 2019"),
yaxis = list(title = "Community area"))
fig2
tmpFile <- tempfile(fileext = ".png")
export(fig2, file = tmpFile)
knitr::opts_chunk$set(echo = TRUE)
top10 <- data_clean%>%top_n(n = 10, wt = Miete)
top10_sorted <- top10[order(top10$Miete, na.last=TRUE) , ]
top10_sorted
knitr::opts_chunk$set(echo = TRUE)
top_apart <- table(top10_sorted$ID,top10_sorted$W.Type, top10_sorted$Zimmer, top10_sorted$W.Fläche, top10_sorted$Miete,
top10_sorted$Quad_m, top10_sorted$KT, top10_sorted$Ort)
top_apart
knitr::opts_chunk$set(echo = TRUE)
top_apart <- table(top10_sorted$ID,top10_sorted$W.Type, top10_sorted$Zimmer)
top_apart
knitr::opts_chunk$set(echo = TRUE)
dat2 <- top10_sorted %>% select(W.Type,Zimmer, W.Fläche, Miete, Quad_m, KT, Ort)
knitr::opts_chunk$set(echo = TRUE)
data_subset <- top10_sorted %>% select(W.Type,Zimmer, W.Fläche, Miete, Quad_m, KT, Ort)
knitr::opts_chunk$set(echo = TRUE)
data_subset <- top10_sorted %>% select(W.Type,Zimmer, W.Fläche, Miete, Quad_m, KT, Ort)
data_subset
knitr::opts_chunk$set(echo = TRUE)
fig2 <- plot_ly(data = data_clean, x = ~Einwohner_2019, y = ~G.Fläche,
marker = list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 2)))
fig2 <- fig2 %>% layout(title = 'Styled Scatter for Rent per Canton',
xaxis = list(title = "Canton Population"),
yaxis = list(title = "Rent"))
fig2
tmpFile <- tempfile(fileext = ".png")
export(fig2, file = tmpFile)
knitr::opts_chunk$set(echo = TRUE)
if (interactive()) {
# Launch with :
esquisser(data_clean)
#Launch esquisse in browser :
esquisser(data_clean, viewer = "browser")
}
knitr::opts_chunk$set(echo = TRUE)
if (interactive()) {
# Launch with :
esquisser(data_clean)
#Launch esquisse in browser :
esquisser(data_clean, viewer = "browser")
}
