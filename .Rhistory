colSums(is.na(data)) ##counts all NA
md.pattern(data) ##shows a table and a plot of the data for the NAs
sum(is.na(data$Fläche))
data_kanton <- group_by(data, "KT")
sum(is.na(data_kanton$Fläche))
colSums(is.na(data)) ##counts all NA
md.pattern(data) ##shows a table and a plot of the data for the NAs
sum(is.na(data$Fläche))
data_kanton <- group_by(data, "KT")
sum(is.na(data_kanton$Fläche))
colSums(is.na(data)) ##counts all NA
md.pattern(data) ##shows a table and a plot of the data for the NAs
sum(is.na(data$Fläche))
data_kanton <- group_by(data, "KT")
sum(is.na(data_kanton$Fläche))
colSums(is.na(data)) ##counts all NA
md.pattern(data) ##shows a table and a plot of the data for the NAs
sum(is.na(data$Fläche))
data_kanton <- group_by(data, "KT")
sum(is.na(data_kanton$Fläche))
colSums(is.na(data)) ##counts all NA
md.pattern(data) ##shows a table and a plot of the data for the NAs
sum(is.na(data$Fläche))
data_kanton <- group_by(data, "KT")
sum(is.na(data_kanton$Fläche))
colSums(is.na(data)) ##counts all NA
md.pattern(data) ##shows a table and a plot of the data for the NAs
sum(is.na(data$Fläche))
data_kanton <- group_by(data, "KT")
sum(is.na(data_kanton$Fläche))
rename.variable(data, Wohnungstyp, W.Typ)
gsub(v.char, pattern = "Wohnungstyp", replacement = "W.Typ")
x <- rename.variable(data, Wohnungstyp, W.Typ)
rename.cols(data, Wohnungstyp, W.Typ)
rename(data, Wohnungstyp = W.Typ)
rename(data, W.Typ = Wohnungstyp)
#shorten column names
rename(data, W.Typ = Wohnungstyp)
rename(data, Miete = Mietpreis_Brutto)
#shorten column names
rename.1 <- rename(data, W.Typ = Wohnungstyp, Miete = Mietpreis_Brutto)
rename.1
rename.1 <- rename(data, W.Typ = Wohnungstyp, Miete = Mietpreis_Brutto, Quadrat = Quadratmeterpreis_Brutto)
rename.1
colSums(is.na(rename.1)) ##counts all NA
md.pattern(rename.1) ##shows a table and a plot of the data for the NAs
rename.1 <- rename(data, W.Typ = Wohnungstyp, Miete = Mietpreis_Brutto, Quad_m = Quadratmeterpreis_Brutto, Bezug = Bezugsdatum)
rename.1
colSums(is.na(rename.1)) ##counts all NA
md.pattern(rename.1) ##shows a table and a plot of the data for the NAs
sum(is.na(data$Fläche))
data_kanton <- group_by(data, "KT")
sum(is.na(data_kanton$Fläche))
colSums(is.na(rename.1)) ##counts all NA
md.pattern(rename.1) ##shows a table and a plot of the data for the NAs
sum(is.na(data$Fläche))
data_kanton <- group_by(data, "KT")
sum(is.na(data_kanton$Fläche))
colSums(is.na(rename.1)) ##counts all NA
md.pattern(rename.1) ##shows a table and a plot of the data for the NAs
sum(is.na(data$Fläche))
data_kanton <- group_by(data, "KT")
sum(is.na(data_kanton$Fläche))
colSums(is.na(rename.1)) ##counts all NA
md.pattern(rename.1) ##shows a table and a plot of the data for the NAs
sum(is.na(data$Fläche))
data_kanton <- group_by(data, "KT")
sum(is.na(data_kanton$Fläche))
colSums(is.na(rename.1)) ##counts all NA
md.pattern(rename.1) ##shows a table and a plot of the data for the NAs
sum(is.na(data$Fläche))
data_kanton <- group_by(data, "KT")
sum(is.na(data_kanton$Fläche))
colSums(is.na(rename.1)) ##counts all NA
md.pattern(rename.1) ##shows a table and a plot of the data for the NAs
sum(is.na(data$Fläche))
data_kanton <- group_by(data, "KT")
sum(is.na(data_kanton$Fläche))
#Because the data has "Umlaute" we use "UTF-8" for the read in.
data <- read.csv2("mietinserate_v1.csv", header = TRUE, fileEncoding = "UTF-8")
head(data)
str(data)
md.pattern(data) ##shows a table and a plot of the data for the NAs
#We transform the data into a data frame and also transform numeric data into numeric and transform the date data into the correct format.
data <- as.data.frame(data)
data$Zimmer = as.numeric(data$Zimmer)
data$Fläche = as.numeric(data$Fläche)
data$Bezugsdatum =as.Date(data$Bezugsdatum, "%d.%m.%Y")
str(data)
#shorten column names
data.1 <- rename(data, W.Typ = Wohnungstyp, Miete = Mietpreis_Brutto, Quad_m = Quadratmeterpreis_Brutto, Bezug = Bezugsdatum)
data.1
colSums(is.na(data.1)) ##counts all NA
md.pattern(data.1) ##shows a table and a plot of the data for the NAs
# sum(is.na(data$Fläche))
#
# data_kanton <- group_by(data, "KT")
# sum(is.na(data_kanton$Fläche))
colSums(is.na(data.1)) ##counts all NA
md.pattern(data.1) ##shows a table and a plot of the data for the NAs
colSums(is.na(data.1)) ##counts all NA
md.pattern(data.1) ##shows a table and a plot of the data for the NAs
# sum(is.na(data$Fläche))
#
# data_kanton <- group_by(data, "KT")
# sum(is.na(data_kanton$Fläche))
colSums(is.na(data.1)) ##counts all NA
md.pattern(data.1) ##shows a table and a plot of the data for the NAs
# sum(is.na(data$Fläche))
#
# data_kanton <- group_by(data, "KT")
# sum(is.na(data_kanton$Fläche))
colSums(is.na(data.1)) ##counts all NA
md.pattern(data.1) ##shows a table and a plot of the data for the NAs
# sum(is.na(data$Fläche))
#
# data_kanton <- group_by(data, "KT")
# sum(is.na(data_kanton$Fläche))
colSums(is.na(data.1)) ##counts all NA
md.pattern(data.1) ##shows a table and a plot of the data for the NAs
# sum(is.na(data$Fläche))
#
# data_kanton <- group_by(data, "KT")
# sum(is.na(data_kanton$Fläche))
colSums(is.na(data.1)) ##counts all NA
md.pattern(data.1) ##shows a table and a plot of the data for the NAs
# sum(is.na(data$Fläche))
#
# data_kanton <- group_by(data, "KT")
# sum(is.na(data_kanton$Fläche))
colSums(is.na(data.1)) ##counts all NA
md.pattern(data.1) ##shows a table and a plot of the data for the NAs
# sum(is.na(data$Fläche))
#
# data_kanton <- group_by(data, "KT")
# sum(is.na(data_kanton$Fläche))
colSums(is.na(data.1)) ##counts all NA
md.pattern(data.1, rotate.names = TRUE) ##shows a table and a plot of the data for the NAs
#fig.height = 5,
# sum(is.na(data$Fläche))
#
# data_kanton <- group_by(data, "KT")
# sum(is.na(data_kanton$Fläche))
colSums(is.na(data.1)) ##counts all NA
md.pattern(data.1, rotate.names = TRUE) ##shows a table and a plot of the data for the NAs
#fig.height = 5,
# sum(is.na(data$Fläche))
#
# data_kanton <- group_by(data, "KT")
# sum(is.na(data_kanton$Fläche))
colSums(is.na(data.1)) ##counts all NA
md.pattern(data.1, rotate.names = TRUE) ##shows a table and a plot of the data for the NAs
#fig.height = 5,
# sum(is.na(data$Fläche))
#
# data_kanton <- group_by(data, "KT")
# sum(is.na(data_kanton$Fläche))
colSums(is.na(data.1)) ##counts all NA
md.pattern(data.1, rotate.names = TRUE) ##shows a table and a plot of the data for the NAs
#fig.height = 5,
# sum(is.na(data$Fläche))
#
# data_kanton <- group_by(data, "KT")
# sum(is.na(data_kanton$Fläche))
colSums(is.na(data.1)) ##counts all NA
md.pattern(data.1, rotate.names = TRUE) ##shows a table and a plot of the data for the NAs
#fig.height = 5,
# sum(is.na(data$Fläche))
#
# data_kanton <- group_by(data, "KT")
# sum(is.na(data_kanton$Fläche))
colSums(is.na(data.1)) ##counts all NA
md.pattern(data.1, rotate.names = TRUE) ##shows a table and a plot of the data for the NAs
#fig.height = 5,
# sum(is.na(data$Fläche))
#
# data_kanton <- group_by(data, "KT")
# sum(is.na(data_kanton$Fläche))
colSums(is.na(data.1)) ##counts all NA
md.pattern(data.1, rotate.names = TRUE) ##shows a table and a plot of the data for the NAs
#fig.height = 5,
# sum(is.na(data$Fläche))
#
# data_kanton <- group_by(data, "KT")
# sum(is.na(data_kanton$Fläche))
colSums(is.na(data.1)) ##counts all NA
md.pattern(data.1, rotate.names = TRUE) ##shows a table and a plot of the data for the NAs
#fig.height = 5,
# sum(is.na(data$Fläche))
#
# data_kanton <- group_by(data, "KT")
# sum(is.na(data_kanton$Fläche))
colSums(is.na(data.1)) ##counts all NA
md.pattern(data.1, rotate.names = TRUE) ##shows a table and a plot of the data for the NAs
#fig.height = 5,
# sum(is.na(data$Fläche))
#
# data_kanton <- group_by(data, "KT")
# sum(is.na(data_kanton$Fläche))
colSums(is.na(data.1)) ##counts all NA
md.pattern(data.1, rotate.names = TRUE) ##shows a table and a plot of the data for the NAs
#fig.height = 5,
# sum(is.na(data$Fläche))
#
# data_kanton <- group_by(data, "KT")
# sum(is.na(data_kanton$Fläche))
#shorten column names
data.1 <- rename(data, W.Typ = Wohnungstyp, Miete = Mietpreis_Brutto, Quad_m = Quadratmeterpreis_Brutto, Bezug = Bezugsdatum)
data.1
colSums(is.na(data.1)) ##counts all NA
md.pattern(data.1, rotate.names = TRUE) ##shows a table and a plot of the data for the NAs
#fig.height = 5,
# sum(is.na(data$Fläche))
#
# data_kanton <- group_by(data, "KT")
# sum(is.na(data_kanton$Fläche))
colSums(is.na(data.1)) ##counts all NA
md.pattern(data.1, rotate.names = TRUE) ##shows a table and a plot of the data for the NAs
#fig.height = 5,
# sum(is.na(data$Fläche))
#
# data_kanton <- group_by(data, "KT")
# sum(is.na(data_kanton$Fläche))
colSums(is.na(data.1)) ##counts all NA
md.pattern(data.1, rotate.names = TRUE) ##shows a table and a plot of the data for the NAs
#fig.height = 5,
# sum(is.na(data$Fläche))
#
# data_kanton <- group_by(data, "KT")
# sum(is.na(data_kanton$Fläche))
#install.packages("mice")
library(dplyr)
library(mice)
d.miet <- read.csv("./R_Bootcamp_Feb2021/DataSets/mietinserate_v1.csv", sep = ";", fileEncoding = "UTF-8")
str(d.miet)
head(d.miet)
show(d.miet)
sum(is.na(d.miet$KT))
x <- group_by(d.miet, "KT")
sum(is.na(x$Fläche))
colSums(is.na(d.miet)) ##counts all na
#sum(d.miet$Bezugsdatum == "") ##sums empty cells for one column
#apply(d.miet, MARGIN = 2, FUN = anyNA) ##margin ist hier Zeile
md.pattern(d.miet, plot = FALSE)
md.pattern(d.miet)
# Hypothesen:
#   - Wo teuerste/günstige Wohnungen
#   - Wo gibt es welche wohnungen am häufigsten?
#   - Wo sind die meisten Wohungen?
#   - Wo sind die grössten Wohnungen?
#   - Welcher Kanton/Gemeinde ist am teuersten?
#   - Fläche pro Preis pro Kanton (nas gleich verteilt? gemäss grösse Kanton)
#install.packages("mice")
library(dplyr)
library(mice)
d.miet <- read.csv("./R_Bootcamp_Feb2021/DataSets/mietinserate_v1.csv", sep = ";", fileEncoding = "UTF-8")
str(d.miet)
head(d.miet)
show(d.miet)
sum(is.na(d.miet$KT))
x <- group_by(d.miet, "KT")
sum(is.na(x$Fläche))
colSums(is.na(d.miet)) ##counts all na
#sum(d.miet$Bezugsdatum == "") ##sums empty cells for one column
#apply(d.miet, MARGIN = 2, FUN = anyNA) ##margin ist hier Zeile
md.pattern(d.miet, plot = FALSE)
md.pattern(d.miet)
# Hypothesen:
#   - Wo teuerste/günstige Wohnungen
#   - Wo gibt es welche wohnungen am häufigsten?
#   - Wo sind die meisten Wohungen?
#   - Wo sind die grössten Wohnungen?
#   - Welcher Kanton/Gemeinde ist am teuersten?
#   - Fläche pro Preis pro Kanton (nas gleich verteilt? gemäss grösse Kanton)
sum(is.na(data$W.Typ))
library(tidyverse)
library(dplyr)
library(mice)
#Because the data has "Umlaute" we use "UTF-8" for the read in.
data <- read.csv2("mietinserate_v1.csv", header = TRUE, fileEncoding = "UTF-8")
head(data)
str(data)
#We transform the data into a data frame and also transform numeric data into numeric and transform the date data into the correct format.
data <- as.data.frame(data)
data$Zimmer = as.numeric(data$Zimmer)
data$Fläche = as.numeric(data$Fläche)
data$Bezugsdatum =as.Date(data$Bezugsdatum, "%d.%m.%Y")
#shorten column names
data.1 <- rename(data, W.Type = Wohnungstyp, Miete = Mietpreis_Brutto, Quad_m = Quadratmeterpreis_Brutto, Bezug = Bezugsdatum)
data.1
colSums(is.na(data.1)) ##counts all NA
md.pattern(data.1, rotate.names = TRUE) ##shows a table and a plot of the data for the NAs
sum(is.na(data.1$W.Typ))
#sum(is.na(data$Fläche))
#data_kanton <- data%>% group_by(KT)
# sum(is.na(data_kanton$Fläche))
data_sep <- data.1$PLZ_Ort%>%
str_match('(.*\\d) (.*)') %>%
as_tibble() %>%
select(2:3) %>%
set_names(c('PLZ', 'Ort'))
data_sep
data_sort <- data_sort%>%select(-PLZ_Ort)
knitr::opts_chunk$set(echo = TRUE)
if (interactive()) {
# Launch with :
esquisser(data_clean)
# If in RStudio it will be launched by default in dialog window
# If not, it will be launched in browser
#Launch esquisse in browser :
esquisser(data_clean, viewer = "browser")
#options("esquisse.viewer" = "viewer")
}
library(esquisse)
if (interactive()) {
# Launch with :
esquisser(data_clean)
# If in RStudio it will be launched by default in dialog window
# If not, it will be launched in browser
#Launch esquisse in browser :
esquisser(data_clean, viewer = "browser")
#options("esquisse.viewer" = "viewer")
}
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyverse)
library(dplyr)
library(mlbench)
library(mice)
library(ggplot2)
library(plotly)
library(shiny)
### needed to export plotly to PDF
#install.packages("webshot")
#webshot::install_phantomjs()
#Because the data contain "Umlaute" we use "UTF-8" for the read in.
data <- read.csv2("mietinserate_v1.csv", header = TRUE, fileEncoding = "UTF-8")
head(data)
str(data)
summary(data)
#Read new data set and join new data set to our data set.
data_canton <- read_xlsx("SchweizKantone_Einwohner_org.xlsx", skip = 3)
head(data_canton)
str(data_canton)
#change names of original 4th row (now 1st) of the data set to have those as the column names and for the join preparation
data_canton <- rename(data_canton, Kanton = Schweiz, KT = CHE,  Hauptstädte = Bern, G.Fläche = "41285", Einwohner_1980 = "6365960", Einwohner_1990 = "6873687", Einwohner_2000 = "7288010", Einwohner_2010 = "7870134", Einwohner_2019 = "8603899")
head(data_canton)
#join data sets
data_left_join <- left_join(data, data_canton, by = "KT")
head(data_left_join)
data_left_join
data_2 <- as.data.frame(data_left_join)
#transform data
data_2$Zimmer = as.numeric(data_left_join$Zimmer)
data_2$Fläche = as.numeric(data_left_join$Fläche)
data_2[data_2 == ""] <- NA
data_2$Bezugsdatum =as.Date(data_left_join$Bezugsdatum, "%d.%m.%Y")
#rename data columns for a better readability
data_1 <- rename(data_2, W.Type = Wohnungstyp, Miete = Mietpreis_Brutto, Quad_m = Quadratmeterpreis_Brutto, Bezug = Bezugsdatum, W.Fläche = Fläche)
data_1
#delete columns that are not needed anymore
data_3 <- data_1 %>% select(-Einwohner_1980, -Einwohner_1990, -Einwohner_2000, -Einwohner_2010)
data_3
data_sep <- data_3$PLZ_Ort%>%
str_match('(.*\\d) (.*)') %>%
as_tibble() %>%
select(2:3) %>%
set_names(c('PLZ', 'Ort'))
data_sep
data_sort <- data_3%>%select(-PLZ_Ort)
data_clean <- bind_cols(data_sort, data_sep)
data_clean
# data_sort <- data_sort%>%select(-PLZ_Ort)
# data_clean <- bind_cols(data_sort, data_sep)
# data_clean
colSums(is.na(data_clean)) ##counts all NAs shown in a table
#data_clean %>% count(KT, sort = TRUE) #shows the amount of cantons in dataset per canton
data_clean %>%
group_by(KT) %>%
summarise(NAs_Zimmer_count = sum(is.na(Zimmer))) #Lists all cantons and shows the sum of "NAs" for the column "Zimmer" including 0
data_clean %>%
filter(is.na(Zimmer))  %>%
count(KT) #Lists all cantons including "NAs" for the column "Zimmer" and sums them without including 0
plot(y = data_clean$Miete,
x = data_clean$W.Fläche,
pch = "x",
title("Rental Price per Apartment"),
xlab = "Apartment Area",
ylab = "Rental Price")
g <- ggplot(data_clean, aes(x=W.Fläche, y=Miete, xlab = "Rental Price", ylab = "Apartment Area") ) +
geom_hex(bons = 70) +
scale_fill_continuous(type = "viridis") +
theme_bw()
g + ggtitle("Price in Relation to Apartment Area") +
xlab("Rental Price") + ylab("Apartment Area")
count_W_Type <- data_clean %>%
group_by(KT, W.Type) %>%
count(KT, sort = TRUE)
fig <- plot_ly(
count_W_Type, x = ~KT, y = ~n, type = 'bar', color = ~W.Type)
fig <- fig %>% layout(barmode = "stack",
title = 'Apartments per canton',
xaxis = list(title = "Canton"),
yaxis = list(title = "Number apartments"))
fig
#count W-Type per canton
count_W_Type <- data_clean %>%
group_by(KT) %>%
count(KT, sort = TRUE)
fig <- plot_ly(
count_W_Type, x = ~KT, y = ~n, type = 'bar')
fig <- fig %>% layout(title = 'Apartments per canton',
xaxis = list(title = "Canton"),
yaxis = list(title = "Number apartments"))
fig
tmpFile <- tempfile(fileext = ".png")
export(fig, file = tmpFile)
fig <- plot_ly(
data_clean, x = ~KT, y = ~Miete, type = 'bar')
fig <- fig %>% layout(title = 'Rent per canton',
xaxis = list(title = "Canton"),
yaxis = list(title = "Rent"))
fig
tmpFile <- tempfile(fileext = ".png")
export(fig, file = tmpFile)
fig2 <- plot_ly(data_clean, y = ~G.Fläche, x = ~Einwohner_2019, type = 'scatter', mode = 'markers', size = 7,
hoverinfo = 'text',
text = ~paste('</br> Canton: ', Kanton,
'</br> Residents: ', Einwohner_2019,
'</br> Community area: ', G.Fläche))
fig2 <- fig2 %>% layout(title = 'Residents in 2019 against community area via canton',
xaxis = list(title = "Residents in 2019"),
yaxis = list(title = "Community area"))
fig2
tmpFile <- tempfile(fileext = ".png")
export(fig2, file = tmpFile)
fig2 <- plot_ly(data = data_clean, x = ~Einwohner_2019, y = ~G.Fläche,
marker = list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 2)))
fig2 <- fig2 %>% layout(title = 'Styled Scatter for Rent per Canton',
xaxis = list(title = "Canton Population"),
yaxis = list(title = "Rent"))
fig2
tmpFile <- tempfile(fileext = ".png")
export(fig2, file = tmpFile)
g <- ggplot(data_clean, aes(x=Miete, y=Zimmer, color=W.Type))+
geom_point(size=2)
g + ggtitle("Types of Apartments") +
xlab("Rental Price") + ylab("Rooms")
##
qplot(y = Zimmer, x = Miete, data = data_clean, facets = ~ W.Type, main = "Types of Apartments", xlab = "Rental Price", ylab = "Rooms")
##
boxplot(Zimmer ~ W.Type, data = data_clean, main = "Average number of rooms of the rental objects", xlab = "Type of Apartment", ylab = "Rooms")
pairs(~Zimmer+Miete+W.Fläche+G.Fläche+Einwohner_2019,data=data_clean,
main="Correlation Matrix of different attributes")
top10 <- data_clean%>%top_n(n = 10, wt = Miete)
top10_sorted <- top10[order(top10$Miete, na.last=TRUE) , ]
top10_sorted
top10 <- data_clean%>%top_n(n = 10, wt = W.Fläche)
top10_sorted <- top10[order(top10$W.Fläche, na.last=TRUE) , ]
top10_sorted
# #install.packages(shiny)
# install.packages("esquisse")
# # Import shiny and
# # esquisse packages
library(shiny)
library(esquisse)
data(data_clean)
esquisser()
if (interactive()) {
# Launch with :
esquisser(data_clean)
# If in RStudio it will be launched by default in dialog window
# If not, it will be launched in browser
#Launch esquisse in browser :
esquisser(data_clean, viewer = "browser")
#options("esquisse.viewer" = "viewer")
}
ui <- fluidPage(
tags$h2("dragulaInput demo for geeksforgeeks"),
tags$br(),
# using dragulaInput()
# to create a drag and
# drop widget
dragulaInput(
inputId = "data_di", sourceLabel = "Source",
targetsLabels = c("Drop Here", "Drop Here 2"),
choices = names(rock), width = "400px"),
verbatimTextOutput(outputId = "result"))
server <- function(input, output, session)
{
output$result <- renderPrint(str(input$data_di))
}
shinyApp(ui = ui, server = server)
if (interactive()) {
# Launch with :
esquisser(data_clean)
# If in RStudio it will be launched by default in dialog window
# If not, it will be launched in browser
#Launch esquisse in browser :
esquisser(data_clean, viewer = "browser")
}
# data(data_clean)
# esquisser()
if (interactive()) {
# Launch with :
#esquisser(data_clean)
#Launch esquisse in browser :
esquisser(data_clean, viewer = "browser")
}
